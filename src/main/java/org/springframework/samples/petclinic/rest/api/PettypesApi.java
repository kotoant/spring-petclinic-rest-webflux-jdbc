/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.springframework.samples.petclinic.rest.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Min;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.samples.petclinic.rest.dto.PetTypeDto;
import org.springframework.samples.petclinic.rest.dto.RestErrorDto;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import reactor.core.publisher.Mono;

import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-04T08:20:09.038458+03:00[Europe/Moscow]")
@Validated
@Tag(name = "pettypes", description = "the pettypes API")
public interface PettypesApi {

    /**
     * POST /pettypes : Create a pet type
     * Creates a pet type .
     *
     * @param petTypeDto The pet type (required)
     * @return Pet type created successfully. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Pet Type not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "addPetType",
        summary = "Create a pet type",
        description = "Creates a pet type .",
        tags = { "pettypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Pet type created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PetTypeDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Pet Type not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/pettypes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<PetTypeDto>> addPetType(
        @Parameter(name = "PetTypeDto", description = "The pet type", required = true) @Valid @RequestBody PetTypeDto petTypeDto
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * DELETE /pettypes/{petTypeId} : Delete a pet type by ID
     * Returns the pet type or a 404 error.
     *
     * @param petTypeId The ID of the pet type. (required)
     * @return Pet type details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Pet type not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "deletePetType",
        summary = "Delete a pet type by ID",
        description = "Returns the pet type or a 404 error.",
        tags = { "pettypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Pet type details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PetTypeDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Pet type not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/pettypes/{petTypeId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<PetTypeDto>> deletePetType(
        @Min(0) @Parameter(name = "petTypeId", description = "The ID of the pet type.", required = true, in = ParameterIn.PATH) @PathVariable("petTypeId") Integer petTypeId
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * GET /pettypes/{petTypeId} : Get a pet type by ID
     * Returns the pet type or a 404 error.
     *
     * @param petTypeId The ID of the pet type. (required)
     * @return Pet type details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Pet Type not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "getPetType",
        summary = "Get a pet type by ID",
        description = "Returns the pet type or a 404 error.",
        tags = { "pettypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Pet type details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PetTypeDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Pet Type not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pettypes/{petTypeId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<PetTypeDto>> getPetType(
        @Min(0) @Parameter(name = "petTypeId", description = "The ID of the pet type.", required = true, in = ParameterIn.PATH) @PathVariable("petTypeId") Integer petTypeId
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * GET /pettypes : Lists pet types
     * Returns an array of pet types.
     *
     * @return Pet types found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "listPetTypes",
        summary = "Lists pet types",
        description = "Returns an array of pet types.",
        tags = { "pettypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Pet types found and returned.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PetTypeDto.class)))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pettypes",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<List<PetTypeDto>>> listPetTypes(

    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * PUT /pettypes/{petTypeId} : Update a pet type by ID
     * Returns the pet type or a 404 error.
     *
     * @param petTypeId The ID of the pet type. (required)
     * @param petTypeDto The pet type (required)
     * @return Pet type details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Pet Type not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "updatePetType",
        summary = "Update a pet type by ID",
        description = "Returns the pet type or a 404 error.",
        tags = { "pettypes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Pet type details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PetTypeDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Pet Type not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/pettypes/{petTypeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<PetTypeDto>> updatePetType(
        @Min(0) @Parameter(name = "petTypeId", description = "The ID of the pet type.", required = true, in = ParameterIn.PATH) @PathVariable("petTypeId") Integer petTypeId,
        @Parameter(name = "PetTypeDto", description = "The pet type", required = true) @Valid @RequestBody PetTypeDto petTypeDto
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }

}

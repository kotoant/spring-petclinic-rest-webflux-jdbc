/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.springframework.samples.petclinic.rest.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Min;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.samples.petclinic.rest.dto.OwnerDto;
import org.springframework.samples.petclinic.rest.dto.OwnerFieldsDto;
import org.springframework.samples.petclinic.rest.dto.PetDto;
import org.springframework.samples.petclinic.rest.dto.PetFieldsDto;
import org.springframework.samples.petclinic.rest.dto.RestErrorDto;
import org.springframework.samples.petclinic.rest.dto.VisitDto;
import org.springframework.samples.petclinic.rest.dto.VisitFieldsDto;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import reactor.core.publisher.Mono;

import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-04T10:51:32.416450+03:00[Europe/Moscow]")
@Validated
@Tag(name = "owners", description = "Endpoints related to pet owners.")
public interface OwnersApi {

    /**
     * POST /owners : Adds a pet owner
     * Records the details of a new pet owner.
     *
     * @param ownerFieldsDto The pet owner (required)
     * @return The pet owner was sucessfully added. (status code 201)
     *         or Bad request. (status code 400)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "addOwner",
        summary = "Adds a pet owner",
        tags = { "owner" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The pet owner was sucessfully added.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OwnerDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/owners",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default  Mono<ResponseEntity<OwnerDto>> addOwner(
        @Parameter(name = "OwnerFieldsDto", description = "The pet owner", required = true) @Valid @RequestBody OwnerFieldsDto ownerFieldsDto
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * POST /owners/{ownerId}/pets : Adds a pet to an owner
     * Records the details of a new pet.
     *
     * @param ownerId The ID of the pet owner. (required)
     * @param petFieldsDto The details of the new pet. (required)
     * @return The pet was sucessfully added. (status code 201)
     *         or Bad request. (status code 400)
     *         or Pet not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "addPetToOwner",
        summary = "Adds a pet to an owner",
        tags = { "pet" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The pet was sucessfully added.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PetDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Pet not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/owners/{ownerId}/pets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default  Mono<ResponseEntity<PetDto>> addPetToOwner(
        @Min(0) @Parameter(name = "ownerId", description = "The ID of the pet owner.", required = true) @PathVariable("ownerId") Integer ownerId,
        @Parameter(name = "PetFieldsDto", description = "The details of the new pet.", required = true) @Valid @RequestBody PetFieldsDto petFieldsDto
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * POST /owners/{ownerId}/pets/{petId}/visits : Adds a vet visit
     * Records the details of a new vet visit.
     *
     * @param ownerId The ID of the pet owner. (required)
     * @param petId The ID of the pet. (required)
     * @param visitFieldsDto The details of the new vet visit. (required)
     * @return The vet visit was sucessfully added. (status code 201)
     *         or Bad request. (status code 400)
     *         or Pet not found for this owner. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "addVisitToOwner",
        summary = "Adds a vet visit",
        tags = { "visit" },
        responses = {
            @ApiResponse(responseCode = "201", description = "The vet visit was sucessfully added.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = VisitDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Pet not found for this owner.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/owners/{ownerId}/pets/{petId}/visits",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default  Mono<ResponseEntity<VisitDto>> addVisitToOwner(
        @Min(0) @Parameter(name = "ownerId", description = "The ID of the pet owner.", required = true) @PathVariable("ownerId") Integer ownerId,
        @Min(0) @Parameter(name = "petId", description = "The ID of the pet.", required = true) @PathVariable("petId") Integer petId,
        @Parameter(name = "VisitFieldsDto", description = "The details of the new vet visit.", required = true) @Valid @RequestBody VisitFieldsDto visitFieldsDto
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * DELETE /owners/{ownerId} : Delete an owner by ID
     * Returns the owner or a 404 error.
     *
     * @param ownerId The ID of the owner. (required)
     * @return Owner details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Owner  not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "deleteOwner",
        summary = "Delete an owner by ID",
        tags = { "owner" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Owner details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OwnerDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Owner  not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/owners/{ownerId}",
        produces = { "application/json" }
    )
    default  Mono<ResponseEntity<OwnerDto>> deleteOwner(
        @Min(0) @Parameter(name = "ownerId", description = "The ID of the owner.", required = true) @PathVariable("ownerId") Integer ownerId
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * GET /owners/{ownerId} : Get a pet owner by ID
     * Returns the pet owner or a 404 error.
     *
     * @param ownerId The ID of the pet owner. (required)
     * @return Owner details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Owner not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "getOwner",
        summary = "Get a pet owner by ID",
        tags = { "owner" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Owner details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OwnerDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Owner not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/owners/{ownerId}",
        produces = { "application/json" }
    )
    default  Mono<ResponseEntity<OwnerDto>> getOwner(
        @Min(0) @Parameter(name = "ownerId", description = "The ID of the pet owner.", required = true) @PathVariable("ownerId") Integer ownerId
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * GET /owners/{ownerId}/pets/{petId} : Get a pet by ID
     * Returns the pet or a 404 error.
     *
     * @param ownerId The ID of the pet owner. (required)
     * @param petId The ID of the pet. (required)
     * @return Pet details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Pet not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "getOwnersPet",
        summary = "Get a pet by ID",
        tags = { "pet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Pet details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PetDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Pet not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/owners/{ownerId}/pets/{petId}",
        produces = { "application/json" }
    )
    default  Mono<ResponseEntity<PetDto>> getOwnersPet(
        @Min(0) @Parameter(name = "ownerId", description = "The ID of the pet owner.", required = true) @PathVariable("ownerId") Integer ownerId,
        @Min(0) @Parameter(name = "petId", description = "The ID of the pet.", required = true) @PathVariable("petId") Integer petId
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * GET /owners : Lists pet owners
     * Returns an array of pet owners.
     *
     * @param lastName Last name. (optional)
     * @return Owner details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "listOwners",
        summary = "Lists pet owners",
        tags = { "owner" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Owner details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OwnerDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/owners",
        produces = { "application/json" }
    )
    default  Mono<ResponseEntity<List<OwnerDto>>> listOwners(
        @Parameter(name = "lastName", description = "Last name.") @Valid @RequestParam(value = "lastName", required = false) String lastName
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * PUT /owners/{ownerId} : Update a pet owner&#39;s details
     * Updates the pet owner record with the specified details.
     *
     * @param ownerId The ID of the pet owner. (required)
     * @param ownerFieldsDto The pet owner details to use for the update. (required)
     * @return Update successful. (status code 200)
     *         or Bad request. (status code 400)
     *         or Owner not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "updateOwner",
        summary = "Update a pet owner's details",
        tags = { "owner" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Update successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OwnerDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Owner not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/owners/{ownerId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default  Mono<ResponseEntity<OwnerDto>> updateOwner(
        @Min(0) @Parameter(name = "ownerId", description = "The ID of the pet owner.", required = true) @PathVariable("ownerId") Integer ownerId,
        @Parameter(name = "OwnerFieldsDto", description = "The pet owner details to use for the update.", required = true) @Valid @RequestBody OwnerFieldsDto ownerFieldsDto
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * PUT /owners/{ownerId}/pets/{petId} : Update a pet&#39;s details
     * Updates the pet record with the specified details.
     *
     * @param ownerId The ID of the pet owner. (required)
     * @param petId The ID of the pet. (required)
     * @param petFieldsDto The pet details to use for the update. (required)
     * @return Update successful. (status code 204)
     *         or Bad request. (status code 400)
     *         or Pet not found for this owner. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "updateOwnersPet",
        summary = "Update a pet's details",
        tags = { "pet" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Update successful."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Pet not found for this owner.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/owners/{ownerId}/pets/{petId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default  Mono<ResponseEntity<Void>> updateOwnersPet(
        @Min(0) @Parameter(name = "ownerId", description = "The ID of the pet owner.", required = true) @PathVariable("ownerId") Integer ownerId,
        @Min(0) @Parameter(name = "petId", description = "The ID of the pet.", required = true) @PathVariable("petId") Integer petId,
        @Parameter(name = "PetFieldsDto", description = "The pet details to use for the update.", required = true) @Valid @RequestBody PetFieldsDto petFieldsDto
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }

}

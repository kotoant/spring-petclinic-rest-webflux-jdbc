/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.springframework.samples.petclinic.rest.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Min;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.samples.petclinic.rest.dto.PetDto;
import org.springframework.samples.petclinic.rest.dto.RestErrorDto;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import reactor.core.publisher.Mono;

import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-04T10:51:32.416450+03:00[Europe/Moscow]")
@Validated
@Tag(name = "pets", description = "Endpoints related to pets.")
public interface PetsApi {

    /**
     * POST /pets : Create a pet
     * Creates a pet .
     *
     * @param petDto The pet (required)
     * @return Pet type created successfully. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Pet not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "addPet",
        summary = "Create a pet",
        tags = { "pet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Pet type created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PetDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Pet not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/pets",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default  Mono<ResponseEntity<PetDto>> addPet(
        @Parameter(name = "PetDto", description = "The pet", required = true) @Valid @RequestBody PetDto petDto
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * DELETE /pets/{petId} : Delete a pet by ID
     * Returns the pet or a 404 error.
     *
     * @param petId The ID of the pet. (required)
     * @return Pet details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Pet not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "deletePet",
        summary = "Delete a pet by ID",
        tags = { "pet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Pet details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PetDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Pet not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/pets/{petId}",
        produces = { "application/json" }
    )
    default  Mono<ResponseEntity<PetDto>> deletePet(
        @Min(0) @Parameter(name = "petId", description = "The ID of the pet.", required = true) @PathVariable("petId") Integer petId
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * GET /pets/{petId} : Get a pet by ID
     * Returns the pet  or a 404 error.
     *
     * @param petId The ID of the pet. (required)
     * @return Pet details found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Bad request. (status code 400)
     *         or Pet not found. (status code 404)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "getPet",
        summary = "Get a pet by ID",
        tags = { "pet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Pet details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PetDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Pet not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pets/{petId}",
        produces = { "application/json" }
    )
    default  Mono<ResponseEntity<PetDto>> getPet(
        @Min(0) @Parameter(name = "petId", description = "The ID of the pet.", required = true) @PathVariable("petId") Integer petId
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * GET /pets : Lists pet
     * Returns an array of pet .
     *
     * @return Pet types found and returned. (status code 200)
     *         or Not modified. (status code 304)
     *         or Server error. (status code 500)
     */
    @Operation(
        operationId = "listPets",
        summary = "Lists pet",
        tags = { "pet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Pet types found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PetDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/pets",
        produces = { "application/json" }
    )
    default  Mono<ResponseEntity<List<PetDto>>> listPets(

    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }


    /**
     * PUT /pets/{petId} : Update a pet by ID
     * Returns the pet or a 404 error.
     *
     * @param petId  The ID of the pet. (required)
     * @param petDto The pet (required)
     * @return Pet details found and returned. (status code 200)
     * or Not modified. (status code 304)
     * or Bad request. (status code 400)
     * or Pet not found. (status code 404)
     * or Server error. (status code 500)
     */
    @Operation(
        operationId = "updatePet",
        summary = "Update a pet by ID",
        tags = { "pet" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Pet details found and returned.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PetDto.class))
            }),
            @ApiResponse(responseCode = "304", description = "Not modified."),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Pet not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RestErrorDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/pets/{petId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<PetDto>> updatePet(
        @Min(0) @Parameter(name = "petId", description = "The ID of the pet.", required = true) @PathVariable("petId") Integer petId,
        @Parameter(name = "PetDto", description = "The pet", required = true) @Valid @RequestBody PetDto petDto
    ) {
        return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

    }

}
